version: 0.2 

phases: 
    install: 
        runtime-versions: 
            docker: 18 
        commands: 
            - echo "About to plan Terraform" 
    pre_build: 
        commands: 
            - echo "we are in the pre build phase" 
            - cd terraform/deploy 
            - echo "Downloading terraform" 
            - wget -q https://releases.hashicorp.com/terraform/1.0.10/terraform_1.0.10_linux_amd64.zip
            - unzip terraform_1.0.10_linux_amd64.zip 
    build: 
        commands: 
            - echo "we are in the build block" 
            - echo "Executing assumerole for arn:aws:iam::$account_id:role/$assume_role_name"
            - temp_role=$(aws sts assume-role --role-arn arn:aws:iam::$account_id:role/$assume_role_name --role-session-name tf_plan)
            - export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
            - export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
            - export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
            - aws sts get-caller-identity
            - echo "we will run some tests" 
            - ./terraform init -backend-config="key=${env}/deploy/terraform.tfstate" 2>&1 | tee /tmp/initOut.txt
            - echo "TF init exit code $?" 
            - ./terraform plan -var-file=$env.tfvars -out=/tmp/deploy.tfplan 2>&1 > /tmp/terraform_plan.txt 
            - if [ $? -ne 0 ]; then exit 1; fi 
            - cat /tmp/terraform_plan.txt 
    post_build: 
        commands: 
            - echo "we are in the post build phase"
            - unset AWS_ACCESS_KEY_ID
            - unset AWS_SECRET_ACCESS_KEY
            - unset AWS_SESSION_TOKEN
artifacts: 
    files: 
        - /tmp/terraform_plan.txt
        - /tmp/deploy.tfplan
        - /tmp/.terraform.lock.hcl
        - /tmp/initOut.txt 
    discard-paths: yes